# encoding: utf-8
# frozen_string_literal: true

require_relative '../resources'

shared_context 'resources::openvpn_server_config' do
  include_context 'resources'

  let(:resource) { 'openvpn_server_config' }
  %i(path key_path config plugin push).each { |p| let(p) { nil } }
  let(:properties) { { path: path, key_path: key_path, config: config } }
  let(:multiproperties) { { plugin: plugin, push: push } }
  let(:name) { 'default' }

  shared_context 'the default action (:create)' do
  end

  shared_context 'the :delete action' do
    let(:action) { :delete }
  end

  shared_examples_for 'any platform' do
    context 'the default action (:create)' do
      include_context description

      shared_examples_for 'any property set' do
        it 'creates an openvpn_server_config resource' do
          expect(chef_run).to create_openvpn_server_config(name)
        end

        it 'creates the key directory' do
          expect(chef_run).to create_directory(key_path || '/etc/openvpn/keys')
            .with(mode: '0700', recursive: true)
        end

        it 'generates the static key' do
          f = (config && config[:tls_auth]) || \
              (key_path && "#{key_path}/static.key") || \
              '/etc/openvpn/keys/static.key'
          expect(chef_run).to run_execute('Generate the OpenVPN static key')
            .with(command: "openvpn --genkey --secret #{f}",
                  creates: f,
                  sensitive: true)
        end

        it 'generates the dh pem file' do
          f = (config && config[:dh]) || \
              (key_path && "#{key_path}/dh2048.pem") || \
              '/etc/openvpn/keys/dh2048.pem'
          expect(chef_run).to create_dhparam_pem(f)
        end

        it 'generates the server private key' do
          f = (config && config[:key]) || \
              (key_path && "#{key_path}/server.key") || \
              '/etc/openvpn/keys/server.key'
          expect(chef_run).to create_rsa_key(f)
        end

        it 'creates the up script' do
          f = config && config[:up] || '/etc/openvpn/server.up.sh'
          expect(chef_run).to create_file(f)
            .with(content: OpenvpnServer::Helpers::Config::UP_SCRIPT)
        end

        it 'creates the down script' do
          f = config && config[:down] || '/etc/openvpn/server.down.sh'
          expect(chef_run).to create_file(f)
            .with(content: OpenvpnServer::Helpers::Config::DOWN_SCRIPT)
        end

        it 'creates the up script directory' do
          expect(chef_run).to create_directory('/etc/openvpn/server.up.d')
        end

        it 'creates the down script directory' do
          expect(chef_run).to create_directory('/etc/openvpn/server.down.d')
        end
      end

      context 'all default properties' do
        it_behaves_like 'any property set'

        it 'creates the expected config file' do
          expected = <<-EOH.gsub(/^ +/, '')
            # OpenVPN server configuration file.
            # This file is generated by Chef. Changes to it will be overwritten.
            auth SHA512
            ca /etc/openvpn/keys/ca.crt
            ccd-exclusive
            cert /etc/openvpn/keys/server.crt
            cipher AES-256-CBC
            client-config-dir /etc/openvpn/clients
            crl-verify /etc/openvpn/crl.pem
            dev tun0
            dh /etc/openvpn/keys/dh2048.pem
            down /etc/openvpn/server.down.sh
            group nogroup
            keepalive 10 120
            key /etc/openvpn/keys/server.key
            key-direction 0
            local 10.0.0.2
            log /var/log/openvpn.log
            port 1194
            proto udp
            reneg-sec 604800
            script-security 2
            server 10.8.0.0 255.255.0.0
            tls-auth /etc/openvpn/keys/static.key
            up /etc/openvpn/server.up.sh
            user nobody
            push "explicit-exit-notify"
            push "inactive 900"
          EOH
          expect(chef_run).to create_file('/etc/openvpn/server.conf')
            .with(content: expected)
        end
      end

      context 'an overridden path property' do
        let(:path) { '/tmp/ovpn.conf' }

        it_behaves_like 'any property set'

        it 'creates the expected config file' do
          expected = <<-EOH.gsub(/^ +/, '')
            # OpenVPN server configuration file.
            # This file is generated by Chef. Changes to it will be overwritten.
            auth SHA512
            ca /etc/openvpn/keys/ca.crt
            ccd-exclusive
            cert /etc/openvpn/keys/server.crt
            cipher AES-256-CBC
            client-config-dir /etc/openvpn/clients
            crl-verify /etc/openvpn/crl.pem
            dev tun0
            dh /etc/openvpn/keys/dh2048.pem
            down /etc/openvpn/server.down.sh
            group nogroup
            keepalive 10 120
            key /etc/openvpn/keys/server.key
            key-direction 0
            local 10.0.0.2
            log /var/log/openvpn.log
            port 1194
            proto udp
            reneg-sec 604800
            script-security 2
            server 10.8.0.0 255.255.0.0
            tls-auth /etc/openvpn/keys/static.key
            up /etc/openvpn/server.up.sh
            user nobody
            push "explicit-exit-notify"
            push "inactive 900"
          EOH
          expect(chef_run).to create_file('/tmp/ovpn.conf')
            .with(content: expected)
        end
      end

      context 'an overridden key_path property' do
        let(:key_path) { '/tmp/keys' }

        it_behaves_like 'any property set'

        it 'creates the expected config file' do
          expected = <<-EOH.gsub(/^ +/, '')
            # OpenVPN server configuration file.
            # This file is generated by Chef. Changes to it will be overwritten.
            auth SHA512
            ca /tmp/keys/ca.crt
            ccd-exclusive
            cert /tmp/keys/server.crt
            cipher AES-256-CBC
            client-config-dir /etc/openvpn/clients
            crl-verify /etc/openvpn/crl.pem
            dev tun0
            dh /tmp/keys/dh2048.pem
            down /etc/openvpn/server.down.sh
            group nogroup
            keepalive 10 120
            key /tmp/keys/server.key
            key-direction 0
            local 10.0.0.2
            log /var/log/openvpn.log
            port 1194
            proto udp
            reneg-sec 604800
            script-security 2
            server 10.8.0.0 255.255.0.0
            tls-auth /tmp/keys/static.key
            up /etc/openvpn/server.up.sh
            user nobody
            push "explicit-exit-notify"
            push "inactive 900"
          EOH
          expect(chef_run).to create_file('/etc/openvpn/server.conf')
            .with(content: expected)
        end
      end

      context 'an overridden config property' do
        let(:config) do
          {
            test_param: 'testvalue',
            another: 'thing',
            up: '/tmp/server.up',
            down: '/tmp/server.down',
            tls_auth: '/tmp/static.key',
            dh: '/tmp/dh2048.pem',
            key: '/tmp/server.key'
          }
        end

        it_behaves_like 'any property set'

        it 'creates the expected config file' do
          expected = <<-EOH.gsub(/^ +/, '')
            # OpenVPN server configuration file.
            # This file is generated by Chef. Changes to it will be overwritten.
            another thing
            dh /tmp/dh2048.pem
            down /tmp/server.down
            key /tmp/server.key
            test-param testvalue
            tls-auth /tmp/static.key
            up /tmp/server.up
          EOH
          expect(chef_run).to create_file('/etc/openvpn/server.conf')
            .with(content: expected)
        end
      end

      context 'some overridden custom properties' do
        let(:properties) do
          {
            dev: 'tap',
            comp_lzo: 'no',
            port: 666,
            tls_cipher: %w(RSA1 RSA2),
            ccd_exclusive: false
          }
        end
        let(:plugin) do
          {
            p1: '/path/to/p1',
            p2: false,
            p3: '/path/to/p3'
          }
        end
        let(:push) do
          {
            comp_lzo: 'no',
            dhcp_option: {
              dns0: 'DNS 8.8.8.8',
              dns1: 'DNS 8.8.4.4',
              dns2: false,
              search: 'DOMAIN example.com'
            }
          }
        end

        it_behaves_like 'any property set'

        it 'creates the expected config file' do
          expected = <<-EOH.gsub(/^ +/, '')
            # OpenVPN server configuration file.
            # This file is generated by Chef. Changes to it will be overwritten.
            auth SHA512
            ca /etc/openvpn/keys/ca.crt
            cert /etc/openvpn/keys/server.crt
            cipher AES-256-CBC
            client-config-dir /etc/openvpn/clients
            comp-lzo no
            crl-verify /etc/openvpn/crl.pem
            dev tap
            dh /etc/openvpn/keys/dh2048.pem
            down /etc/openvpn/server.down.sh
            group nogroup
            keepalive 10 120
            key /etc/openvpn/keys/server.key
            key-direction 0
            local 10.0.0.2
            log /var/log/openvpn.log
            plugin /path/to/p1
            plugin /path/to/p3
            port 666
            proto udp
            reneg-sec 604800
            script-security 2
            server 10.8.0.0 255.255.0.0
            tls-auth /etc/openvpn/keys/static.key
            tls-cipher RSA1:RSA2
            up /etc/openvpn/server.up.sh
            user nobody
            push "comp-lzo no"
            push "dhcp-option DNS 8.8.8.8"
            push "dhcp-option DNS 8.8.4.4"
            push "dhcp-option DOMAIN example.com"
            push "explicit-exit-notify"
            push "inactive 900"
          EOH
          expect(chef_run).to create_file('/etc/openvpn/server.conf')
            .with(content: expected)
        end
      end
    end

    context 'the :delete action' do
      include_context description

      shared_examples_for 'any property set' do
        it 'creates an openvpn_server_config resource' do
          expect(chef_run).to delete_openvpn_server_config(name)
        end

        it 'deletes the config file' do
          expect(chef_run).to delete_file(path || '/etc/openvpn/server.conf')
        end

        it 'deletes the down script directory' do
          expect(chef_run).to delete_directory('/etc/openvpn/server.down.d')
        end

        it 'deletes the up script directory' do
          expect(chef_run).to delete_directory('/etc/openvpn/server.up.d')
        end

        it 'deletes the down script' do
          expect(chef_run).to delete_file('/etc/openvpn/server.down.sh')
        end

        it 'deletes the up script' do
          expect(chef_run).to delete_file('/etc/openvpn/server.up.sh')
        end

        it 'deletes the server private key' do
          f = (config && config[:key]) || \
              (key_path && "#{key_path}/server.key") || \
              '/etc/openvpn/keys/server.key'
          expect(chef_run).to delete_file(f)
        end

        it 'deletes the dh pem file' do
          f = (config && config[:dh]) || \
              (key_path && "#{key_path}/dh2048.pem") || \
              '/etc/openvpn/keys/dh2048.pem'
          expect(chef_run).to delete_file(f)
        end

        it 'deletes the static key' do
          f = (config && config[:tls_auth]) || \
              (key_path && "#{key_path}/static.key") || \
              '/etc/openvpn/keys/static.key'
          expect(chef_run).to delete_file(f)
        end

        it 'deletes the key directory' do
          expect(chef_run).to delete_directory(key_path || '/etc/openvpn/keys')
        end
      end

      context 'all default properties' do
        it_behaves_like 'any property set'
      end

      context 'an overridden path property' do
        let(:path) { '/tmp/ovpn.conf' }

        it_behaves_like 'any property set'
      end

      context 'an overridden key_path property' do
        let(:key_path) { '/tmp/keys' }

        it_behaves_like 'any property set'
      end
    end
  end
end
