# encoding: utf-8
# frozen_string_literal: true

require 'openssl'
require_relative 'spec_helper'

EXPECTED_CONTENT = Regexp.new(<<-EOH.gsub(/^ +/, '')).freeze
  # OpenVPN server configuration file.
  # This file is generated by Chef. Changes to it will be overwritten.
  auth SHA512
  ca /etc/openvpn/keys/ca.crt
  ccd-exclusive
  cert /etc/openvpn/keys/server.crt
  cipher AES-256-CBC
  client-config-dir /etc/openvpn/clients
  crl-verify /etc/openvpn/crl.pem
  dev tun0
  dh /etc/openvpn/keys/dh2048.pem
  down /etc/openvpn/server.down.sh
  group nogroup
  keepalive 10 120
  key /etc/openvpn/keys/server.key
  key-direction 0
  local [0-9]+\.[0-9]+\.[0-9]+\.[0-9]
  log /var/log/openvpn.log
  port 1194
  proto udp
  reneg-sec 604800
  script_security 2
  server 10.8.0.0 255.255.0.0
  tls-auth /etc/openvpn/keys/static.key
  up /etc/openvpn/server.up.sh
  user nobody
  push "explicit-exit-notify"
  push "inactive 900"
EOH

control 'openvpn_server::default::config' do
  impact 1.0
  title 'OpenVPN is configured'
  desc 'OpenVPN is configured'

  %w(
    /etc/openvpn/keys /etc/openvpn/server.up.d /etc/openvpn/server.down.d
  ).each do |d|
    describe directory(d) do
      it 'exists' do
        expect(subject).to exist
      end
    end
  end

  describe file('/etc/openvpn/keys/dh2048.pem') do
    it 'is a valid DH key' do
      expect(OpenSSL::PKey::DH.new(subject.content)).to_not raise_error
    end
  end

  describe file('/etc/openvpn/keys/server.key') do
    it 'is a valid RSA key' do
      expect(OpenSSL::PKey::RSA.new(subject.content)).to_not raise_error
    end
  end

  %w(
    /etc/openvpn/server.up.sh
    /etc/openvpn/server.down.sh
  ).each do |f|
    describe file(f) do
      it 'exists' do
        expect(subject).to exist
      end
    end
  end

  describe file('/etc/openvpn/server.conf') do
    it 'has the expected content' do
      expect(subject.content).to match(EXPECTED_CONTENT)
    end
  end
end
